#!/bin/bash

set -euo pipefail

# Function to log messages
log() {
  echo "~~~ $1"
}

# Function to handle errors
error() {
  echo "ðŸš¨ Error: $1" >&2
  exit 1
}

# Parse plugin configuration
parse_config() {
  SKIP_CHECKOUT="${BUILDKITE_PLUGIN_CUSTOM_CHECKOUT_SKIP_CHECKOUT:-false}"
  if [[ "$SKIP_CHECKOUT" != "true" ]]; then
    error "The 'skip_checkout' option must be set to true for this plugin to work correctly"
  fi

  CUSTOM_CHECKOUT_PATH="${BUILDKITE_PLUGIN_CUSTOM_CHECKOUT_BUILD_CHECKOUT_PATH:-$BUILDKITE_BUILD_CHECKOUT_PATH}"
  DELETE_CHECKOUT="${BUILDKITE_PLUGIN_CUSTOM_CHECKOUT_DELETE_CHECKOUT:-false}"
  
  # Parse custom repository configuration
  CUSTOM_REPO="${BUILDKITE_PLUGIN_CUSTOM_CHECKOUT_REPOS_0_CONFIG_0_URL:-$BUILDKITE_REPO}"
  CUSTOM_REF="${BUILDKITE_PLUGIN_CUSTOM_CHECKOUT_REPOS_0_CONFIG_0_REF:-$BUILDKITE_BRANCH}"
}

# Perform git checkout
git_checkout() {
  local url="$1"
  local ref="${2:-}"
  local clone_flags="${3:-}"
  local ssh_key_path="${4:-}"

  if [[ -n "$ssh_key_path" ]]; then
    export GIT_SSH_COMMAND="ssh -i $ssh_key_path -o StrictHostKeyChecking=no"
  fi

  if [[ -d ".git" ]]; then
    log "Updating existing repository"
    git remote set-url origin "$url" || error "Failed to set remote URL"
    git fetch origin || error "Failed to fetch from remote"
  else
    log "Cloning repository"
    git clone $clone_flags "$url" . || error "Failed to clone repository"
  fi

  if [[ -n "$ref" ]]; then
    log "Checking out ref: $ref"
    git checkout -B "$ref" "origin/$ref" || error "Failed to checkout ref"
  else
    log "Checking out default branch"
    git checkout -B "${BUILDKITE_BRANCH}" "origin/${BUILDKITE_BRANCH}" || error "Failed to checkout branch"
  fi
}

# Main execution
parse_config

mkdir -p "$CUSTOM_CHECKOUT_PATH"
cd "$CUSTOM_CHECKOUT_PATH"

# Check if any repos are configured
if [[ -z "${BUILDKITE_PLUGIN_CUSTOM_CHECKOUT_REPOS_0_CONFIG_0_URL:-}" ]]; then
  log "No repositories configured, using default BUILDKITE_REPO"
  git_checkout "$BUILDKITE_REPO" "$BUILDKITE_BRANCH"
else
  for ((i=0; ; i++)); do
    url_var="BUILDKITE_PLUGIN_CUSTOM_CHECKOUT_REPOS_${i}_CONFIG_0_URL"
    ref_var="BUILDKITE_PLUGIN_CUSTOM_CHECKOUT_REPOS_${i}_CONFIG_0_REF"
    clone_flags_var="BUILDKITE_PLUGIN_CUSTOM_CHECKOUT_REPOS_${i}_CONFIG_0_CLONE_FLAGS"
    ssh_key_path_var="BUILDKITE_PLUGIN_CUSTOM_CHECKOUT_REPOS_${i}_CONFIG_0_SSH_KEY_PATH"

    if [[ -z "${!url_var:-}" ]]; then
      break
    fi

    log "Checking out repository: ${!url_var}"
    git_checkout "${!url_var}" "${!ref_var:-}" "${!clone_flags_var:-}" "${!ssh_key_path_var:-}"
  done
fi

# Set Buildkite environment variables
export BUILDKITE_REPO="${BUILDKITE_PLUGIN_CUSTOM_CHECKOUT_REPOS_0_CONFIG_0_URL:-$BUILDKITE_REPO}"
export BUILDKITE_REFSPEC="${BUILDKITE_PLUGIN_CUSTOM_CHECKOUT_REPOS_0_CONFIG_0_REF:-$BUILDKITE_BRANCH}"
export BUILDKITE_COMMIT="$(git rev-parse HEAD)"
export BUILDKITE_BUILD_CHECKOUT_PATH="$CUSTOM_CHECKOUT_PATH"

log "Custom checkout completed successfully"
log "Current commit: $BUILDKITE_COMMIT"
log "Commit message: $(git log -1 --pretty=%B)"
log "Commit author: $(git log -1 --pretty=%an)"
log "Commit date: $(git log -1 --pretty=%ad)"

if [[ "$DELETE_CHECKOUT" == "true" ]]; then
  trap 'rm -rf "$CUSTOM_CHECKOUT_PATH"' EXIT
fi
