#!/bin/bash

set -euo pipefail

# Colors for output
GREEN='\033[0;32m'
RED='\033[0;31m'
NC='\033[0m' # No Color

# Function to log messages
plugin_log() {
  echo -e "${GREEN}~~~ ${1}${NC}"
}

# Function to log errors
plugin_error() {
  echo -e "${RED}ðŸš¨ Error: ${1}${NC}" >&2
  exit 1
}

# Function to check if a command exists
command_exists() {
  command -v "$1" >/dev/null 2>&1
}

# Function to check required commands
check_required_commands() {
  local cmds=("$@")
  for cmd in "${cmds[@]}"; do
    if ! command_exists "$cmd"; then
      plugin_error "Required command not found: $cmd"
    fi
  done
}

# Check required commands
check_required_commands git

# Parse plugin configuration
parse_config() {
  CUSTOM_CHECKOUT_PATH="${BUILDKITE_PLUGIN_SMOOTH_CHECKOUT_BUILD_CHECKOUT_PATH:-$BUILDKITE_BUILD_CHECKOUT_PATH}"
  DELETE_CHECKOUT="${BUILDKITE_PLUGIN_SMOOTH_CHECKOUT_DELETE_CHECKOUT:-false}"
}

# Perform git checkout
git_checkout() {
  local url="$1"
  local ref="${2:-}"
  local clone_flags="${3:-}"
  local ssh_key_path="${4:-}"

  if [[ -n "$ssh_key_path" ]]; then
    export GIT_SSH_COMMAND="ssh -i $ssh_key_path -o StrictHostKeyChecking=no"
  fi

  if [[ -d ".git" ]]; then
    plugin_log "Updating existing repository"
    git remote set-url origin "$url" || plugin_error "Failed to set remote URL"
    git fetch origin || plugin_error "Failed to fetch from remote"
  else
    plugin_log "Cloning repository"
    git clone $clone_flags "$url" . || plugin_error "Failed to clone repository"
  fi

  if [[ -n "$ref" ]]; then
    plugin_log "Checking out ref: $ref"
    git checkout -B "$ref" "origin/$ref" || plugin_error "Failed to checkout ref"
  else
    plugin_log "Checking out default branch"
    git checkout -B "${BUILDKITE_BRANCH}" "origin/${BUILDKITE_BRANCH}" || plugin_error "Failed to checkout branch"
  fi
}

# Main execution
parse_config

mkdir -p "$CUSTOM_CHECKOUT_PATH"
cd "$CUSTOM_CHECKOUT_PATH"

for ((i=0; ; i++)); do
  url_var="BUILDKITE_PLUGIN_SMOOTH_CHECKOUT_REPOS_${i}_CONFIG_0_URL"
  ref_var="BUILDKITE_PLUGIN_SMOOTH_CHECKOUT_REPOS_${i}_CONFIG_0_REF"
  clone_flags_var="BUILDKITE_PLUGIN_SMOOTH_CHECKOUT_REPOS_${i}_CONFIG_0_CLONE_FLAGS"
  ssh_key_path_var="BUILDKITE_PLUGIN_SMOOTH_CHECKOUT_REPOS_${i}_CONFIG_0_SSH_KEY_PATH"

  if [[ -z "${!url_var:-}" ]]; then
    break
  fi

  plugin_log "Checking out repository: ${!url_var}"
  git_checkout "${!url_var}" "${!ref_var:-}" "${!clone_flags_var:-}" "${!ssh_key_path_var:-}"
done

# Set Buildkite environment variables
export BUILDKITE_REPO="${BUILDKITE_PLUGIN_SMOOTH_CHECKOUT_REPOS_0_CONFIG_0_URL}"
export BUILDKITE_REFSPEC="${BUILDKITE_PLUGIN_SMOOTH_CHECKOUT_REPOS_0_CONFIG_0_REF:-$BUILDKITE_BRANCH}"
export BUILDKITE_COMMIT="$(git rev-parse HEAD)"
export BUILDKITE_BUILD_CHECKOUT_PATH="$CUSTOM_CHECKOUT_PATH"

plugin_log "Custom checkout completed successfully"
plugin_log "Current commit: $BUILDKITE_COMMIT"
plugin_log "Commit message: $(git log -1 --pretty=%B)"
plugin_log "Commit author: $(git log -1 --pretty=%an)"
plugin_log "Commit date: $(git log -1 --pretty=%ad)"
