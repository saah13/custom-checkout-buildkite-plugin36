#!/usr/bin/env bash

set -eo pipefail

function log_info {
  echo "--- $1"
}

function log_error {
  echo "ERROR: $1" >&2
  exit 1
}

function setup_workspace {
  log_info ":open_file_folder: Setting up workspace"
  mkdir -p "$BUILDKITE_BUILD_CHECKOUT_PATH" && cd "$BUILDKITE_BUILD_CHECKOUT_PATH" || log_error "Failed to set up workspace"
  log_info "Setup completed successfully."
}

function setup_git_and_ssh {
  log_info ":key: Setting up git and ssh"
  if ! ssh-keygen -F github.com > /dev/null; then
    log_info "github.com not found in known_hosts"
    mkdir -p /tmp
    TMP_FILE=$(mktemp /tmp/github_rsa.pub.XXXXXX)
    ssh-keyscan -t rsa github.com > "$TMP_FILE"
    GH_PUBKEY_FINGERPRINT=$(ssh-keygen -lf "$TMP_FILE" | awk '{ print $2 }')
    [ "$GH_PUBKEY_FINGERPRINT" == "SHA256:uNiVztksCsDhcc0u9e8BujQXVUpKZIDTMczCvj3tD2s" ] || log_error "FATAL: got wrong public key from keyscan"
    mkdir -p "$HOME/.ssh" && cat "$TMP_FILE" >> "$HOME/.ssh/known_hosts" && rm "$TMP_FILE"
    log_info "github.com added to known_hosts"
  fi
}

function get_indirected_env {
  local env_name="$1"
  echo "${!env_name}"
}

function get_clone_flags {
  local -n clone_flags_ref=$1
  local env_prefix="$2"

  temp_clone_flags=$(get_indirected_env "$env_prefix")
  [ -n "$temp_clone_flags" ] && clone_flags_ref=("$temp_clone_flags") && return

  local index=0
  while true; do
    temp_clone_flag=$(get_indirected_env "${env_prefix}_${index}")
    [ -z "$temp_clone_flag" ] && break
    clone_flags_ref+=("$temp_clone_flag")
    index=$((index+1))
  done
}

function get_repo_name {
  local repo_url="$1"
  echo "${repo_url%/}" | awk -F '/' '{ print $NF }' | sed -e "s/\.git$//"
}

function setup_git_repo {
  local REPO_URL="$1"
  local CHECKOUT_REF="$2"
  local SSH_KEY_PATH="$3"
  local CLONE_DIR="$4"
  local -n CLONE_FLAGS=$5

  log_info "Cloning repository $REPO_URL into $CLONE_DIR"

  if [[ -n "$SSH_KEY_PATH" ]]; then
    export GIT_SSH_COMMAND="ssh -i $SSH_KEY_PATH -o IdentitiesOnly=yes"
  fi

  mkdir -p "$CLONE_DIR" && cd "$CLONE_DIR" || log_error "Failed to create or navigate to $CLONE_DIR"

  if [[ -d ".git" ]]; then
    log_info "Git repository already exists. Cleaning and setting remote URL"
    git clean -fdqx || sudo git clean -fdqx
    git remote set-url origin "$REPO_URL"
  else
    log_info "Cloning $REPO_URL"
    git clone "${CLONE_FLAGS[@]}" --no-checkout -- "$REPO_URL" . || log_error "Failed to clone repository"
  fi

  if [ -z "$CHECKOUT_REF" ]; then
    if [ -n "$BUILDKITE_TAG" ]; then
      log_info "Checking out tag: $BUILDKITE_TAG"
      git fetch --force origin "$BUILDKITE_TAG:refs/tags/$BUILDKITE_TAG" && git checkout --quiet --force "$BUILDKITE_TAG"
    else
      log_info "Checking out branch: $BUILDKITE_BRANCH with $BUILDKITE_COMMIT"
      git fetch --force origin "$BUILDKITE_BRANCH:$BUILDKITE_BRANCH" --update-head-ok && git checkout --quiet --force "$BUILDKITE_BRANCH" && git reset --hard "$BUILDKITE_COMMIT"
    fi
  else
    log_info "Checking out ref: $CHECKOUT_REF"
    git fetch --force origin "$CHECKOUT_REF" && git checkout --quiet --force "$CHECKOUT_REF" && git reset --hard FETCH_HEAD
  fi

  if command -v git-lfs; then
    log_info "Running git lfs pull"
    git lfs install
    git lfs pull
  else
    log_info "git-lfs not installed, skipping git lfs pull"
  fi

  git log -n 1 --format="Repo checked out at %h %s"
}

function checkout_repo {
  local config_prefix="$1"
  local multiple_repos="$2"

  log_info ":git: Checking out repository"
  local index=0

  while true; do
    local url
    url=$(get_indirected_env "${config_prefix}_${index}_URL")
    [ -z "$url" ] && break

    local ref ssh_key_path clone_flags clone_dir
    ref=$(get_indirected_env "${config_prefix}_${index}_REF")
    ssh_key_path=$(get_indirected_env "${config_prefix}_${index}_SSH_KEY_PATH")
    get_clone_flags clone_flags "${config_prefix}_${index}_CLONE_FLAGS"

    clone_dir="."
    [[ "$multiple_repos" == "true" ]] && clone_dir=$(get_repo_name "$url")

    setup_git_repo "$url" "$ref" "$ssh_key_path" "$clone_dir" clone_flags

    index=$((index+1))
  done
}

# Main Execution
[ "$BUILDKITE_PLUGIN_SMOOTH_CHECKOUT_SKIP_CHECKOUT" == "true" ] && log_info ":fast_forward: Skipping checkout" && exit 0

setup_workspace
setup_git_and_ssh

PLUGIN_PREFIX="BUILDKITE_PLUGIN_SMOOTH_CHECKOUT"
MULTIPLE_REPOS="true"
[ -z "$(get_indirected_env "${PLUGIN_PREFIX}_REPOS_1_CONFIG_0_URL")" ] && MULTIPLE_REPOS="false"

index=0
while true; do
  config_prefix="${PLUGIN_PREFIX}_REPOS_${index}_CONFIG"
  [ -z "$(get_indirected_env "${config_prefix}_0_URL")" ] && break
  cd "$BUILDKITE_BUILD_CHECKOUT_PATH"
  checkout_repo "$config_prefix" "$MULTIPLE_REPOS"
  index=$((index+1))
done

cd "$BUILDKITE_BUILD_CHECKOUT_PATH"
