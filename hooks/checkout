#!/usr/bin/env bash

set -euo pipefail

# Functions

log_section() {
  echo -e "\n--- $1"
}

log_info() {
  echo -e "INFO: $1"
}

log_error() {
  echo -e "ERROR: $1" >&2
}

check_required_env() {
  local var_name="$1"
  if [[ -z "${!var_name:-}" ]]; then
    log_error "Required environment variable '$var_name' is not set."
    exit 1
  fi
}

add_ssh_host() {
  local host="$1"
  local expected_fingerprint="$2"

  if ! ssh-keygen -F "$host" > /dev/null; then
    log_info "$host not found in known_hosts"
    local tmp_file
    tmp_file=$(mktemp)
    ssh-keyscan -t rsa "$host" > "$tmp_file"
    local fingerprint
    fingerprint=$(ssh-keygen -lf "$tmp_file" | awk '{ print $2 }')
    if [[ "$fingerprint" != "$expected_fingerprint" ]]; then
      log_error "Fingerprint mismatch for $host. Expected $expected_fingerprint, got $fingerprint."
      exit 1
    fi
    mkdir -p "$HOME/.ssh"
    cat "$tmp_file" >> "$HOME/.ssh/known_hosts"
    rm "$tmp_file"
    log_info "$host added to known_hosts"
  fi
}

clone_repository() {
  local repo_url="$1"
  local checkout_ref="$2"
  local ssh_key_path="$3"
  local clone_dir="$4"
  local clone_flags=("${!5}")

  log_info "Cloning repository '$repo_url' into '$clone_dir'"
  mkdir -p "$clone_dir"
  pushd "$clone_dir" > /dev/null

  # Configure SSH command if SSH key is provided
  if [[ -n "$ssh_key_path" ]]; then
    export GIT_SSH_COMMAND="ssh -i $ssh_key_path -o IdentitiesOnly=yes"
  fi

  # Clone or fetch repository
  if [[ -d ".git" ]]; then
    log_info "Repository already exists. Fetching latest changes."
    git fetch origin
  else
    git clone "${clone_flags[@]}" "$repo_url" .
  fi

  # Checkout the specified ref
  if [[ -n "$checkout_ref" ]]; then
    git checkout "$checkout_ref"
  else
    git checkout "$BUILDKITE_COMMIT"
  fi

  # Handle Git LFS
  if command -v git-lfs > /dev/null; then
    git lfs install
    git lfs pull
  fi

  popd > /dev/null
}

# Main Execution

log_section ":open_file_folder: Setting up workspace"

# Check for skip checkout
if [[ "${BUILDKITE_PLUGIN_IMPROVED_CHECKOUT_SKIP_CHECKOUT:-false}" == "true" ]]; then
  log_info "Skipping checkout as per configuration."
  exit 0
fi

# Ensure required environment variables are set
check_required_env "BUILDKITE_BUILD_CHECKOUT_PATH"
mkdir -p "$BUILDKITE_BUILD_CHECKOUT_PATH"
cd "$BUILDKITE_BUILD_CHECKOUT_PATH"

log_section ":key: Configuring SSH"

# Add SSH hosts (configurable)
SSH_HOSTS=("github.com")
SSH_FINGERPRINTS=(
  "SHA256:nThbg6GmWd4dilYsXWXaYLsOMV5rGGDrEXki4ZyxjTk"  # GitHub RSA
)

for i in "${!SSH_HOSTS[@]}"; do
  add_ssh_host "${SSH_HOSTS[$i]}" "${SSH_FINGERPRINTS[$i]}"
done

log_section ":git: Starting repository checkout"

# Parse plugin configuration for repositories
REPOS_COUNT=0

while true; do
  REPO_URL_VAR="BUILDKITE_PLUGIN_IMPROVED_CHECKOUT_REPOS_${REPOS_COUNT}_URL"
  REPO_REF_VAR="BUILDKITE_PLUGIN_IMPROVED_CHECKOUT_REPOS_${REPOS_COUNT}_REF"
  REPO_SSH_KEY_VAR="BUILDKITE_PLUGIN_IMPROVED_CHECKOUT_REPOS_${REPOS_COUNT}_SSH_KEY_PATH"
  REPO_CLONE_FLAGS_VAR="BUILDKITE_PLUGIN_IMPROVED_CHECKOUT_REPOS_${REPOS_COUNT}_CLONE_FLAGS"

  if [[ -z "${!REPO_URL_VAR:-}" ]]; then
    break
  fi

  REPO_URL="${!REPO_URL_VAR}"
  REPO_REF="${!REPO_REF_VAR:-}"
  REPO_SSH_KEY_PATH="${!REPO_SSH_KEY_VAR:-}"
  IFS=' ' read -r -a REPO_CLONE_FLAGS <<< "${!REPO_CLONE_FLAGS_VAR:-}"

  REPO_NAME=$(basename -s .git "${REPO_URL}")
  CLONE_DIR="${BUILDKITE_BUILD_CHECKOUT_PATH}/${REPO_NAME}"

  clone_repository "$REPO_URL" "$REPO_REF" "$REPO_SSH_KEY_PATH" "$CLONE_DIR" REPO_CLONE_FLAGS[@]

  ((REPOS_COUNT++))
done

log_info "Repository checkout completed successfully."
